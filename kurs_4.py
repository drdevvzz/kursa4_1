import sys
import os
import json
from PyQt5.QtWidgets import (QMainWindow, QApplication, QLabel, QPushButton,
                             QVBoxLayout, QWidget, QListWidget, QListWidgetItem,
                             QLineEdit, QTextEdit, QDateEdit, QDateTimeEdit,
                             QHBoxLayout, QMessageBox, QCheckBox, QDialog,
                             QDialogButtonBox, QFormLayout, QFileDialog, QTimeEdit,
                             QMenuBar, QMenu, QAction, QSystemTrayIcon)
from PyQt5.QtCore import Qt, QDate, QDateTime, QUrl, QFileInfo, QTimer, QTime
from PyQt5.QtGui import QColor, QPalette, QFont, QDesktopServices, QIcon, QPixmap
from PyQt5 import QtWidgets


class Task:
    def __init__(self, title, description, due_date, notifications=None, subtasks=None, attachments=None,
                 completed=False, skipped=False):
        self.title = title
        self.description = description
        self.due_date = due_date
        self.notifications = notifications if notifications else []
        self.subtasks = subtasks if subtasks else []
        self.attachments = attachments if attachments else []
        self.completed = completed
        self.skipped = skipped
        self.notification_shown = False

    def to_dict(self):
        return {
            'title': self.title,
            'description': self.description,
            'due_date': self.due_date.toString(Qt.ISODate),
            'notifications': self.notifications,
            'subtasks': self.subtasks,
            'attachments': self.attachments,
            'completed': self.completed,
            'skipped': self.skipped,
            'notification_shown': self.notification_shown
        }

    @classmethod
    def from_dict(cls, data):
        due_date = QDate.fromString(data['due_date'], Qt.ISODate)
        task = cls(
            data['title'],
            data['description'],
            due_date,
            data.get('notifications', []),
            data.get('subtasks', []),
            data.get('attachments', []),
            data.get('completed', False),
            data.get('skipped', False)
        )
        task.notification_shown = data.get('notification_shown', False)
        return task


class NotificationManager:
    def __init__(self, window):
        self.window = window
        self.timer = QTimer()
        self.timer.timeout.connect(self.check_notifications)
        self.timer.start(60000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    def check_notifications(self):
        now = QDateTime.currentDateTime()

        for task in self.window.tasks:
            if task.completed or task.skipped or task.notification_shown:
                continue

            for notification in task.notifications:
                try:
                    parts = notification.split()
                    if len(parts) >= 2:
                        date_str = ' '.join(parts[:2])
                        notify_time = QDateTime.fromString(date_str, "dd.MM.yyyy HH:mm")

                        if notify_time.isValid() and now >= notify_time:
                            self.show_notification(task, notification)
                            task.notification_shown = True
                            self.window.save_tasks()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def show_notification(self, task, notification_text):
        msg = QMessageBox(self.window)
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ")
        msg.setText(f"–ó–∞–¥–∞—á–∞: {task.title}\n"
                    f"–°—Ä–æ–∫: {task.due_date.toString('dd.MM.yyyy')}\n"
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notification_text}")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()


class LoginDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á')
        self.setFixedSize(600, 600)

        # –ú–µ–Ω—é —Å –≤—ã—Ö–æ–¥–æ–º
        menubar = QMenuBar(self)
        file_menu = menubar.addMenu('–§–∞–π–ª')
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.triggered.connect(self.close_application)
        file_menu.addAction(exit_action)

        self.setStyleSheet("""
            QDialog {
                background-color: #f5f7fa;
            }
            QLabel {
                color: #4a4a4a;
                font-size: 14px;
            }
            QLineEdit {
                border: 1px solid #d1d5db;
                border-radius: 5px;
                padding: 8px;
                font-size: 14px;
                background-color: white;
            }
            QLineEdit:focus {
                border: 1px solid #3b82f6;
            }
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 8px 16px;
                font-size: 14px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
            QPushButton:pressed {
                background-color: #1d4ed8;
            }
        """)

        self.title_label = QLabel('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á')
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setStyleSheet("""
            font-size: 20px;
            font-weight: bold;
            color: #1e3a8a;
            margin-bottom: 20px;
        """)

        self.icon_label = QLabel()
        self.icon_label.setAlignment(Qt.AlignCenter)
        self.icon_label.setStyleSheet("""
            font-size: 40px;
            color: #3b82f6;
            margin-bottom: 10px;
        """)
        self.icon_label.setText("üìÖ")

        self.username = QLineEdit()
        self.username.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

        self.password = QLineEdit()
        self.password.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        self.password.setEchoMode(QLineEdit.Password)

        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.button(QDialogButtonBox.Ok).setText('–í–æ–π—Ç–∏')
        button_box.button(QDialogButtonBox.Cancel).setText('–û—Ç–º–µ–Ω–∞')
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)

        layout = QVBoxLayout()
        layout.setMenuBar(menubar)
        layout.addWidget(self.icon_label)
        layout.addWidget(self.title_label)

        form_layout = QFormLayout()
        form_layout.addRow('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', self.username)
        form_layout.addRow('–ü–∞—Ä–æ–ª—å:', self.password)
        form_layout.setSpacing(15)
        form_layout.setContentsMargins(40, 20, 40, 20)

        layout.addLayout(form_layout)
        layout.addWidget(button_box, alignment=Qt.AlignCenter)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)

        self.setLayout(layout)

    def close_application(self):
        QApplication.quit()


class AttachmentItem(QListWidgetItem):
    def __init__(self, file_path, parent=None):
        super().__init__(parent)
        self.file_path = file_path
        file_info = QFileInfo(file_path)
        self.setText(file_info.fileName())
        self.setToolTip(file_path)

        if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
            self.setIcon(QApplication.style().standardIcon(QtWidgets.QStyle.SP_FileIcon))
        else:
            self.setIcon(QApplication.style().standardIcon(QtWidgets.QStyle.SP_FileLinkIcon))


class Window(QMainWindow):
    def __init__(self, username):
        super().__init__()
        self.current_user = username
        self.data_file = f"{username}_tasks.json"
        self.tasks = []

        self.load_tasks()

        if not self.tasks:
            self.tasks = [
                Task("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã", QDate.currentDate().addDays(3)),
                Task("–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "–ù–∞–ø–∏—Å–∞—Ç—å –≥–ª–∞–≤—É 2", QDate.currentDate().addDays(7)),
                Task("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É", "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ª–µ–∫—Ü–∏–∏", QDate.currentDate().addDays(14))
            ]
            self.tasks[0].notifications = [
                f"{QDate.currentDate().addDays(2).toString('dd.MM.yyyy')} 09:00 - –ù–∞—á–∞—Ç—å –∑–∞ 2 –¥–Ω—è"]
            self.tasks[0].subtasks = ["–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"]
            self.save_tasks()

        self.initUI()
        self.setWindowTitle(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á - {self.current_user}")

        self.notification_manager = NotificationManager(self)
        self.init_system_tray()

    def init_system_tray(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        self.tray_icon = QSystemTrayIcon(self)

        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é)
        pixmap = QPixmap(16, 16)
        pixmap.fill(Qt.blue)
        self.tray_icon.setIcon(QIcon(pixmap))

        self.tray_icon.setToolTip("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è —Ç—Ä–µ—è
        tray_menu = QMenu()

        show_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
        show_action.triggered.connect(self.show_normal)
        tray_menu.addAction(show_action)

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.quit_application)
        tray_menu.addAction(exit_action)

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ
        self.tray_icon.activated.connect(self.tray_icon_clicked)

    def tray_icon_clicked(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ"""
        if reason == QSystemTrayIcon.DoubleClick:
            self.show_normal()

    def show_normal(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –∏–∑ —Ç—Ä–µ—è"""
        self.showNormal()
        self.activateWindow()
        self.raise_()

    def initUI(self):
        self.setGeometry(300, 300, 1000, 700)
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f8fafc;
            }
            QListWidget {
                border: 1px solid #e2e8f0;
                border-radius: 5px;
                background-color: white;
            }
            QTextEdit, QLineEdit, QDateEdit {
                border: 1px solid #e2e8f0;
                border-radius: 5px;
                padding: 5px;
                background-color: white;
            }
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
        """)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = self.menuBar()
        file_menu = menubar.addMenu('–§–∞–π–ª')

        # –ü—É–Ω–∫—Ç –º–µ–Ω—é "–í—ã—Ö–æ–¥"
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.quit_application)
        file_menu.addAction(exit_action)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QHBoxLayout(self.central_widget)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.left_panel = QWidget()
        self.left_layout = QVBoxLayout(self.left_panel)

        self.task_list = QListWidget()
        self.task_list.itemClicked.connect(self.show_task_details)
        self.left_layout.addWidget(self.task_list)

        self.btn_refresh = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.btn_refresh.clicked.connect(self.refresh_task_list)
        self.left_layout.addWidget(self.btn_refresh)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        self.right_panel = QWidget()
        self.right_layout = QVBoxLayout(self.right_panel)

        self.task_title = QLineEdit()
        self.task_title.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        self.right_layout.addWidget(self.task_title)

        self.task_description = QTextEdit()
        self.task_description.setPlaceholderText("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        self.right_layout.addWidget(self.task_description)

        self.due_date_edit = QDateEdit()
        self.due_date_edit.setCalendarPopup(True)
        self.due_date_edit.setDate(QDate.currentDate())
        self.right_layout.addWidget(QLabel("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"))
        self.right_layout.addWidget(self.due_date_edit)

        # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_layout = QHBoxLayout()
        self.completed_checkbox = QCheckBox("–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
        self.completed_checkbox.stateChanged.connect(self.update_task_status)
        status_layout.addWidget(self.completed_checkbox)

        self.skipped_checkbox = QCheckBox("–ü—Ä–æ–ø—É—â–µ–Ω–∞")
        self.skipped_checkbox.stateChanged.connect(self.update_task_status)
        status_layout.addWidget(self.skipped_checkbox)

        self.right_layout.addLayout(status_layout)

        # –í–ª–æ–∂–µ–Ω–∏—è
        self.right_layout.addWidget(QLabel("–í–ª–æ–∂–µ–Ω–∏—è:"))
        self.attachments_list = QListWidget()
        self.attachments_list.itemDoubleClicked.connect(self.open_attachment)
        self.right_layout.addWidget(self.attachments_list)

        attachment_buttons = QHBoxLayout()
        self.btn_add_attachment = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ")
        self.btn_add_attachment.clicked.connect(self.add_attachment)
        attachment_buttons.addWidget(self.btn_add_attachment)

        self.btn_open_attachment = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ")
        self.btn_open_attachment.clicked.connect(lambda: self.open_attachment(self.attachments_list.currentItem()))
        attachment_buttons.addWidget(self.btn_open_attachment)

        self.btn_remove_attachment = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ")
        self.btn_remove_attachment.clicked.connect(self.remove_attachment)
        attachment_buttons.addWidget(self.btn_remove_attachment)

        self.right_layout.addLayout(attachment_buttons)

        # –ü–æ–¥–∑–∞–¥–∞—á–∏
        self.right_layout.addWidget(QLabel("–ü–æ–¥–∑–∞–¥–∞—á–∏:"))
        self.subtasks_list = QListWidget()
        self.right_layout.addWidget(self.subtasks_list)

        self.new_subtask_input = QLineEdit()
        self.new_subtask_input.setPlaceholderText("–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞")
        self.right_layout.addWidget(self.new_subtask_input)

        self.btn_add_subtask = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É")
        self.btn_add_subtask.clicked.connect(self.add_subtask)
        self.right_layout.addWidget(self.btn_add_subtask)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.right_layout.addWidget(QLabel("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"))
        self.notifications_list = QListWidget()
        self.right_layout.addWidget(self.notifications_list)

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_layout = QHBoxLayout()

        self.notification_date = QDateEdit()
        self.notification_date.setCalendarPopup(True)
        self.notification_date.setDate(QDate.currentDate())
        notification_layout.addWidget(self.notification_date)

        self.notification_time = QTimeEdit()
        self.notification_time.setTime(QTime.currentTime())
        notification_layout.addWidget(self.notification_time)

        self.notification_text = QLineEdit()
        self.notification_text.setPlaceholderText("–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notification_layout.addWidget(self.notification_text)

        self.right_layout.addLayout(notification_layout)

        self.btn_add_notification = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        self.btn_add_notification.clicked.connect(self.add_notification)
        self.right_layout.addWidget(self.btn_add_notification)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        self.btn_save = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.btn_save.clicked.connect(self.save_task)
        button_layout.addWidget(self.btn_save)

        self.btn_new_task = QPushButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        self.btn_new_task.clicked.connect(self.new_task)
        button_layout.addWidget(self.btn_new_task)

        self.btn_delete_task = QPushButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.btn_delete_task.clicked.connect(self.delete_task)
        button_layout.addWidget(self.btn_delete_task)

        self.btn_skip_task = QPushButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.btn_skip_task.clicked.connect(self.skip_task)
        button_layout.addWidget(self.btn_skip_task)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.btn_exit = QPushButton("–í—ã—Ö–æ–¥")
        self.btn_exit.clicked.connect(self.quit_application)
        button_layout.addWidget(self.btn_exit)

        self.right_layout.addLayout(button_layout)

        self.main_layout.addWidget(self.left_panel, 1)
        self.main_layout.addWidget(self.right_panel, 2)

        self.refresh_task_list()
        self.right_panel.setEnabled(False)

    def quit_application(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.',
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.save_tasks()
            self.tray_icon.hide()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ
            QApplication.quit()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.save_tasks()
        # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å - —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π?',
            QMessageBox.StandardButton.Close | QMessageBox.StandardButton.Cancel,
            QMessageBox.StandardButton.Cancel
        )

        if reply == QMessageBox.StandardButton.Close:
            self.tray_icon.hide()
            event.accept()
        else:
            self.hide()
            event.ignore()

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ Window –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    def load_tasks(self):
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.tasks = [Task.from_dict(task_data) for task_data in data]
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏: {str(e)}")

    def save_tasks(self):
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump([task.to_dict() for task in self.tasks], f, ensure_ascii=False, indent=2)
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏: {str(e)}")

    def refresh_task_list(self):
        self.task_list.clear()
        today = QDate.currentDate()

        for task in self.tasks:
            status = ""
            if task.completed:
                status = " (–í—ã–ø–æ–ª–Ω–µ–Ω–∞)"
            elif task.skipped:
                status = " (–ü—Ä–æ–ø—É—â–µ–Ω–∞)"

            item = QListWidgetItem(f"{task.title} - {task.due_date.toString('dd.MM.yyyy')}{status}")
            item.setData(Qt.UserRole, task)

            if task.completed:
                item.setBackground(QColor(220, 252, 231))
                font = item.font()
                font.setStrikeOut(True)
                item.setFont(font)
            elif task.skipped:
                item.setBackground(QColor(253, 230, 138))
                font = item.font()
                font.setItalic(True)
                item.setFont(font)
            elif task.due_date < today:
                item.setBackground(QColor(254, 226, 226))

            self.task_list.addItem(item)

    def show_task_details(self, item):
        self.current_task = item.data(Qt.UserRole)
        self.right_panel.setEnabled(True)

        self.task_title.setText(self.current_task.title)
        self.task_description.setText(self.current_task.description)
        self.due_date_edit.setDate(self.current_task.due_date)

        self.completed_checkbox.blockSignals(True)
        self.skipped_checkbox.blockSignals(True)

        self.completed_checkbox.setChecked(self.current_task.completed)
        self.skipped_checkbox.setChecked(self.current_task.skipped)

        self.completed_checkbox.blockSignals(False)
        self.skipped_checkbox.blockSignals(False)

        self.subtasks_list.clear()
        for subtask in self.current_task.subtasks:
            self.subtasks_list.addItem(subtask)

        self.notifications_list.clear()
        for notification in self.current_task.notifications:
            self.notifications_list.addItem(notification)

        self.attachments_list.clear()
        for attachment in self.current_task.attachments:
            item = AttachmentItem(attachment)
            self.attachments_list.addItem(item)

    def update_task_status(self):
        if not hasattr(self, 'current_task'):
            return

        if self.completed_checkbox.isChecked():
            self.current_task.completed = True
            self.current_task.skipped = False
            self.skipped_checkbox.setChecked(False)
        elif self.skipped_checkbox.isChecked():
            self.current_task.skipped = True
            self.current_task.completed = False
            self.completed_checkbox.setChecked(False)
        else:
            self.current_task.completed = False
            self.current_task.skipped = False

        self.save_tasks()
        self.refresh_task_list()

    def save_task(self):
        if not hasattr(self, 'current_task'):
            return

        self.current_task.title = self.task_title.text()
        self.current_task.description = self.task_description.toPlainText()
        self.current_task.due_date = self.due_date_edit.date()

        self.save_tasks()
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        self.refresh_task_list()

    def new_task(self):
        new_task = Task("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "", QDate.currentDate().addDays(1))
        self.tasks.append(new_task)
        self.save_tasks()

        self.refresh_task_list()
        for i in range(self.task_list.count()):
            item = self.task_list.item(i)
            if item.data(Qt.UserRole) == new_task:
                self.task_list.setCurrentItem(item)
                self.show_task_details(item)
                break

    def delete_task(self):
        if not hasattr(self, 'current_task'):
            return

        reply = QMessageBox.question(
            self, '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "{self.current_task.title}"?',
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.tasks.remove(self.current_task)
            self.save_tasks()
            self.refresh_task_list()
            self.right_panel.setEnabled(False)

    def skip_task(self):
        if not hasattr(self, 'current_task'):
            return

        self.current_task.skipped = True
        self.current_task.completed = False
        self.skipped_checkbox.setChecked(True)
        self.completed_checkbox.setChecked(False)
        self.save_tasks()
        self.refresh_task_list()

    def add_subtask(self):
        if not hasattr(self, 'current_task'):
            return

        subtask = self.new_subtask_input.text()
        if subtask:
            self.current_task.subtasks.append(subtask)
            self.subtasks_list.addItem(subtask)
            self.new_subtask_input.clear()
            self.save_tasks()

    def add_notification(self):
        if not hasattr(self, 'current_task'):
            return

        date = self.notification_date.date().toString("dd.MM.yyyy")
        time = self.notification_time.time().toString("HH:mm")
        text = self.notification_text.text()

        if text:
            notification = f"{date} {time} - {text}"
            self.current_task.notifications.append(notification)
            self.notifications_list.addItem(notification)
            self.notification_text.clear()
            self.current_task.notification_shown = False
            self.save_tasks()

    def add_attachment(self):
        if not hasattr(self, 'current_task'):
            return

        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "",
            "–í—Å–µ —Ñ–∞–π–ª—ã (*);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.gif *.bmp);;–î–æ–∫—É–º–µ–Ω—Ç—ã (*.pdf *.doc *.docx *.txt)"
        )

        if file_path:
            self.current_task.attachments.append(file_path)
            item = AttachmentItem(file_path)
            self.attachments_list.addItem(item)
            self.save_tasks()

    def remove_attachment(self):
        if not hasattr(self, 'current_task') or not self.attachments_list.currentItem():
            return

        current_row = self.attachments_list.currentRow()
        if 0 <= current_row < len(self.current_task.attachments):
            self.current_task.attachments.pop(current_row)
            self.attachments_list.takeItem(current_row)
            self.save_tasks()

    def open_attachment(self, item):
        if item and hasattr(item, 'file_path'):
            file_path = item.file_path
            if os.path.exists(file_path):
                url = QUrl.fromLocalFile(file_path)
                if not QDesktopServices.openUrl(url):
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {file_path}")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")


def application():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')

    login = LoginDialog()
    if login.exec_() == QDialog.Accepted:
        if login.username.text():
            window = Window(login.username.text())
            window.show()
            sys.exit(app.exec_())
        else:
            QMessageBox.warning(None, '–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            sys.exit(1)
    else:
        sys.exit(0)


if __name__ == '__main__':
    application()
